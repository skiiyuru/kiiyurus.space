---
// astro tools
import { getCollection } from "astro:content"

// layouts
import BaseLayout from "@/layouts/BaseLayout.astro"

//components
import Badge from "@/components/ui/Badge.astro"
import ProjectCard from "@/components/ui/ProjectCard.astro"

// lib
import getSearchParamAsArray from "@/lib/getSearchParamAsArray"

// collections
let projects = await getCollection("projects")
projects = projects.sort(
  (a, b) => Number(b.data.isFeatured) - Number(a.data.isFeatured)
)

const allTools = await getCollection("tools")

const filters = getSearchParamAsArray(Astro.url, "tools")

if (filters.length > 0) {
  projects = projects.filter((project) => {
    const tools = project.data.icons.map((icon) => icon.id)
    return filters.some((filter) => tools.includes(filter))
  })
}
---

<BaseLayout
  title="Stephen Kiiyuru's Projects"
  description="Here are some recent projects I've done"
>
  <section class="px-4 grid gap-14 bg-zinc-900 py-10">
    <div id="title-wrapper">
      <h2
        class="text-4xl lg:text-5xl font-display tracking-wider
      text-center
      text-pretty"
      >
        Take a look
      </h2>
      <p class="text-center">
        Immerse yourself in what Iâ€™ve built and experience it firsthand.
      </p>
    </div>

    <div id="filter-wrapper" class="grid gap-4">
      <div class="flex gap-4 items-center">
        <p class="font-bold">FILTER BY TECH</p>
        <div class="flex gap-4 flex-wrap items-center">
          {
            filters.length > 0 && (
              <Badge id="clear-all" pressed={true} aria-pressed={"true"}>
                Clear All
              </Badge>
            )
          }
        </div>
      </div>

      <ul class="flex gap-4 flex-wrap items-center">
        {
          allTools.map(({ data, id }) => {
            const isPressed = filters.includes(id)
            return (
              <Badge
                data-tool={id}
                aria-pressed={isPressed ? "true" : "false"}
                pressed={isPressed}
              >
                {data.title}
              </Badge>
            )
          })
        }
      </ul>
    </div>

    <div id="cards-wrapper" class="grid gap-6 items-center">
      {
        projects.map(({ data }) => (
          <div id="card" class={`${data.isFeatured ? "featured" : ""}`}>
            <ProjectCard data={data} />
          </div>
        ))
      }
    </div>
  </section>
</BaseLayout>

<script>
  import getSearchParamAsArray from "@/lib/getSearchParamAsArray"
  import setNewURLParams from "@/lib/setNewURLParams"

  const filterButtons = document.querySelectorAll(
    "[data-tool]"
  ) as NodeListOf<HTMLButtonElement>

  const clearAllButton = document.querySelector("#clear-all")

  // clear filters
  clearAllButton?.addEventListener("click", () => {
    window.location.href = "projects"
  })

  // update filters
  filterButtons.forEach((button) =>
    button.addEventListener("click", () => {
      const isPressed = button.getAttribute("aria-pressed") === "true"

      button.setAttribute("aria-pressed", isPressed ? "false" : "true")

      const currentUrl = new URL(window.location.href)

      const existingParams = getSearchParamAsArray(currentUrl, "tools")
      const newParams = isPressed
        ? existingParams.filter((param) => param !== button.dataset.tool)
        : ([...existingParams, button.dataset.tool] as string[])

      const newUrl = setNewURLParams({
        url: currentUrl,
        key: "tools",
        valueArray: newParams,
      })

      window.location.assign(newUrl.toString())
    })
  )
</script>

<style>
  @media (min-width: 640px) {
    section {
      grid-template-columns: subgrid;
      grid-column: span 2;
    }

    h2,
    p {
      grid-column: span 2;
    }

    #filter-wrapper {
      grid-column: span 2;
    }

    #cards-wrapper {
      grid-template-columns: subgrid;
      grid-auto-flow: row;
      grid-column: span 2;
      /* grid-auto-rows: minmax(100px, auto); */
    }

    #title-wrapper {
      grid-column: span 2;
    }
  }

  @media (min-width: 768px) {
    section {
      padding-left: 2rem;
      padding-right: 2rem;
    }

    #cards-wrapper {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @media (min-width: 1024px) {
    section {
      grid-template-columns: subgrid;
      grid-column: span 6;
    }

    #title-wrapper {
      grid-column: span 6;
    }

    #filter-wrapper {
      /* margin: 0 auto; */
      grid-column: span 6;
    }

    #cards-wrapper {
      grid-column: span 6;
    }

    #cards-wrapper #card.featured {
      grid-column: span 2;
      grid-row: span 2;
    }
  }
</style>
