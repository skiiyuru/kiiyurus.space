const _astro_dataLayerContent = [["Map",1,2,9,10,35,36,73,74,176,177],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.1.7","content-config-digest","951fd5b7188e05a7","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://kiiyurus.space\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"server\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"prefetch\":{\"prefetchAll\":true},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[{\"protocol\":\"https\"}]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false},\"legacy\":{\"collections\":false}}","features",["Map",11,12,19,20,27,28],"award-winning",{id:11,data:13,filePath:17,digest:18},{title:14,description:15,icon:16},"Award-Winning","I’ve given myself at least three rewards in the last five years.","award","src/content/features/award-winning.yaml","38e9c25c1c29968f","custom-designed",{id:19,data:21,filePath:25,digest:26},{title:22,description:23,icon:24},"Custom-Designed","I personalize each design to fit your brand and represent you well.","design","src/content/features/custom-designed.yaml","191cf8c8ed04ebf6","snappy-fast",{id:27,data:29,filePath:33,digest:34},{title:30,description:31,icon:32},"Snappy-Fast","All my websites are built optimized for performance and speed.","speed","src/content/features/snappy-fast.yaml","9ef92acbea95305c","tools",["Map",37,38,43,44,49,50,55,56,61,62,67,68],"blender",{id:37,data:39,filePath:41,digest:42},{title:40,icon:37},"Blender","src/content/tools/blender.yaml","f0e16a48ab3728ca","material",{id:43,data:45,filePath:47,digest:48},{title:46,icon:43},"Material UI","src/content/tools/material.yaml","4270af7386915664","tailwind",{id:49,data:51,filePath:53,digest:54},{title:52,icon:49},"Tailwind","src/content/tools/tailwind.yaml","558131f945f12410","three",{id:55,data:57,filePath:59,digest:60},{title:58,icon:55},"Three.js","src/content/tools/three.yaml","fc003c37106dea28","glsl",{id:61,data:63,filePath:65,digest:66},{title:64,icon:61},"GLSL","src/content/tools/glsl.yaml","8f6c492c26c292a3","react",{id:67,data:69,filePath:71,digest:72},{title:70,icon:67},"React","src/content/tools/react.yaml","c901da8141f9bab3","projects",["Map",75,76,87,88,98,99,109,110,120,121,132,133,143,144,153,154,165,166],"galaxy",{id:75,data:77,filePath:85,digest:86},{title:78,icons:79,url:82,thumbnail:83,isFeatured:84},"Galaxy",[80,81],{id:55,collection:35},{id:61,collection:35},"https://kiiyuru-galaxy.vercel.app/","https://rzei8mczw5.ufs.sh/f/v9xa1lyXWM8usS5lM5OLYPkQpCjwmsig13AtTbFnOaRNlW5d",false,"src/content/projects/galaxy.yaml","2a64026c1a1edd4d","coffee",{id:87,data:89,filePath:96,digest:97},{title:90,icons:91,url:94,thumbnail:95,isFeatured:84},"Hot coffee",[92,93],{id:55,collection:35},{id:61,collection:35},"https://kiiyurus-coffee.netlify.app","https://rzei8mczw5.ufs.sh/f/v9xa1lyXWM8u0Zf5Zd8THD4wJjrLt8EZKUdFqRVOcPM3XyIz","src/content/projects/coffee.yaml","0e30b15e79fe2a91","laptop",{id:98,data:100,filePath:107,digest:108},{title:101,icons:102,url:105,thumbnail:106,isFeatured:84},"Floating Mac",[103,104],{id:67,collection:35},{id:55,collection:35},"https://kiiyuru-mac.vercel.app/","https://rzei8mczw5.ufs.sh/f/v9xa1lyXWM8uy4RJQcjQrmAkh4XKnWfjiZ6pVlN9G1DxCLbq","src/content/projects/laptop.yaml","d1b6022796df4896","imla",{id:109,data:111,filePath:118,digest:119},{title:112,icons:113,url:116,thumbnail:117,isFeatured:84},"Imla",[114,115],{id:67,collection:35},{id:43,collection:35},"https://imla.io/","https://rzei8mczw5.ufs.sh/f/v9xa1lyXWM8u7HZuZAnxWjRybKP8nh5FHitDOSz4Jk0aLNcr","src/content/projects/imla.yaml","d7e52c7ccd0752a5","marble-race",{id:120,data:122,filePath:130,digest:131},{title:123,icons:124,url:127,thumbnail:128,isFeatured:129},"Marble Race",[125,126],{id:67,collection:35},{id:55,collection:35},"https://sk-marble-race.vercel.app/","https://rzei8mczw5.ufs.sh/f/v9xa1lyXWM8ujB3ONHpb8qY95kZod1xpu3CQsvtcfSKOrVmH",true,"src/content/projects/marble-race.yaml","22939cc651820b03","portal",{id:132,data:134,filePath:141,digest:142},{title:135,icons:136,url:139,thumbnail:140,isFeatured:84},"Portal",[137,138],{id:55,collection:35},{id:37,collection:35},"https://kiiyuru-portal.vercel.app/","https://rzei8mczw5.ufs.sh/f/v9xa1lyXWM8uCovm2vyUriFLG6eSvMZQDXJUk7Ezb89afTwK","src/content/projects/portal.yaml","641ccd192bf4f816","scroll",{id:143,data:145,filePath:151,digest:152},{title:146,icons:147,url:149,thumbnail:150,isFeatured:84},"3D Scroll",[148],{id:55,collection:35},"https://hi-kiiyuru.vercel.app/","https://rzei8mczw5.ufs.sh/f/v9xa1lyXWM8umHoLfuaCTJwfKrsZpoVv4CqE2FIMgLim1Gt0","src/content/projects/scroll.yaml","d814bdc9e17cffdc","portfolio",{id:153,data:155,filePath:163,digest:164},{title:156,icons:157,url:161,thumbnail:162,isFeatured:84},"Old Portfolio",[158,159,160],{id:67,collection:35},{id:55,collection:35},{id:49,collection:35},"https://skiiyuru.vercel.app/","https://rzei8mczw5.ufs.sh/f/v9xa1lyXWM8uUSZ2DFRHe1lxv5PkHhDNc7dspRzIXWLA3m6j","src/content/projects/portfolio.yaml","b83facb854b43d68","sea",{id:165,data:167,filePath:174,digest:175},{title:168,icons:169,url:172,thumbnail:173,isFeatured:84},"Raging sea",[170,171],{id:55,collection:35},{id:61,collection:35},"https://kiiyuru-raging-sea.vercel.app/","https://rzei8mczw5.ufs.sh/f/v9xa1lyXWM8u0fSbjH8THD4wJjrLt8EZKUdFqRVOcPM3XyIz","src/content/projects/sea.yaml","4d23c2836640d6aa","posts",["Map",178,179],"css-grid",{id:178,data:180,body:185,filePath:186,digest:187,rendered:188},{title:181,description:182,image:183,pubDate:184,isDraft:84},"Laying out the Web using CSS Grid","Learn how to get started with CSS Grid using these few handy tips.","https://rzei8mczw5.ufs.sh/f/v9xa1lyXWM8uYhRDB6LEYTZ7sfj68qwlrdJBIL0MUoxikGm2",["Date","2025-01-15T00:00:00.000Z"],"## TLDR\n\nUse Flexbox only for\n\n1. A series of boxes that are NOT the same size\n2. A series of boxes that are NOT in and even-sized grid,\n3. When the same space between elements is important, not the same width of each element\n\nUse Grid for everything else layout related!\n\n## Intro\n\nI’ve been using Flexbox to lay out all my elements on a web page. I would often come across alignment issues and fall into the bad habit of setting fixed widths and heights or other hacky methods to “solve” such problems.\n\nFor example, when creating pricing cards, some would be taller than others and in order to fix this, I would make the shorter cards stretch to match the tallest one or set a fixed heigh that works for all cards. Shame on me!\n\nI heard about CSS Grid and looked it up but the few tutorials I skimmed through left me uninspired to give it a try. One day I came across [Jen Kramer’s](https://www.linkedin.com/in/jen4web) class on [Grid and Flexbox](https://grid-flexbox.css.education/index.html) and realized I had been doing layouts all wrong!\n\n## How to use Grid\n\nImagine you have a web page made up of a section and multiple cards. On mobile devices, maybe it would look something like this:\n\n<!-- ![Screenshot 2025-01-13 160035.png](Screenshot_2025-01-13_160035.png) -->\n\nNot so complicated right? But what about a fancy desktop layout like this:\n\n<!-- ![Screenshot 2025-01-13 155939.png](Screenshot_2025-01-13_155939.png) -->\n\nGrid to the rescue! We can set our parent element `section` to become a grid by saying\n\n```css\nsection {\n  display: grid;\n}\n```\n\nA grid is made up of columns and rows. Our desktop layout is made up of 8 columns and 4 rows\n\n<!-- “image with columns and rows” -->\n\nWe can specify this by saying\n\n```css\nsection {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(4, auto);\n}\n```\n\n`1fr` implies a fraction of the screen while `auto` means be as big as the largest item in that row.\n\nThe first card takes up 4 columns and 4 rows while the rest take up 2 columns and 2 rows each. In order for the cards to reference their parent’s grid definition, we need to use `subgrid`. We can define this by saying\n\n```css\n.card {\n  grid-template-columns: subgrid;\n  grid-template-rows: subgrid;\n}\n\n.card:first-of-type {\n  grid-column: span 4;\n  grid-row: span 4;\n}\n\n.card:not(:first-of-type) {\n  grid-column: span 2;\n  grid-row: span 2;\n}\n```\n\nAnd that’s it. Those are the main ideas to keep in mind when you want to create such fancy layouts. Of course there’s a lot more I haven’t mentioned and if you would like to dive deeper, I highly recommend Jen’s course.","src/content/posts/css-grid.md","22560dbffedeaac3",{html:189,metadata:190},"<h2 id=\"tldr\">TLDR</h2>\n<p>Use Flexbox only for</p>\n<ol>\n<li>A series of boxes that are NOT the same size</li>\n<li>A series of boxes that are NOT in and even-sized grid,</li>\n<li>When the same space between elements is important, not the same width of each element</li>\n</ol>\n<p>Use Grid for everything else layout related!</p>\n<h2 id=\"intro\">Intro</h2>\n<p>I’ve been using Flexbox to lay out all my elements on a web page. I would often come across alignment issues and fall into the bad habit of setting fixed widths and heights or other hacky methods to “solve” such problems.</p>\n<p>For example, when creating pricing cards, some would be taller than others and in order to fix this, I would make the shorter cards stretch to match the tallest one or set a fixed heigh that works for all cards. Shame on me!</p>\n<p>I heard about CSS Grid and looked it up but the few tutorials I skimmed through left me uninspired to give it a try. One day I came across <a href=\"https://www.linkedin.com/in/jen4web\">Jen Kramer’s</a> class on <a href=\"https://grid-flexbox.css.education/index.html\">Grid and Flexbox</a> and realized I had been doing layouts all wrong!</p>\n<h2 id=\"how-to-use-grid\">How to use Grid</h2>\n<p>Imagine you have a web page made up of a section and multiple cards. On mobile devices, maybe it would look something like this:</p>\n<!-- ![Screenshot 2025-01-13 160035.png](Screenshot_2025-01-13_160035.png) -->\n<p>Not so complicated right? But what about a fancy desktop layout like this:</p>\n<!-- ![Screenshot 2025-01-13 155939.png](Screenshot_2025-01-13_155939.png) -->\n<p>Grid to the rescue! We can set our parent element <code>section</code> to become a grid by saying</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\"><code><span class=\"line\"><span style=\"color:#85E89D\">section</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  display</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">grid</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>A grid is made up of columns and rows. Our desktop layout is made up of 8 columns and 4 rows</p>\n<!-- “image with columns and rows” -->\n<p>We can specify this by saying</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\"><code><span class=\"line\"><span style=\"color:#85E89D\">section</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  display</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">grid</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  grid-template-columns</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">repeat</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">8</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#F97583\">fr</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  grid-template-rows</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">repeat</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">4</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">auto</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p><code>1fr</code> implies a fraction of the screen while <code>auto</code> means be as big as the largest item in that row.</p>\n<p>The first card takes up 4 columns and 4 rows while the rest take up 2 columns and 2 rows each. In order for the cards to reference their parent’s grid definition, we need to use <code>subgrid</code>. We can define this by saying</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\"><code><span class=\"line\"><span style=\"color:#B392F0\">.card</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  grid-template-columns</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">subgrid</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  grid-template-rows</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">subgrid</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">.card:first-of-type</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  grid-column</span><span style=\"color:#E1E4E8\">: span </span><span style=\"color:#79B8FF\">4</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  grid-row</span><span style=\"color:#E1E4E8\">: span </span><span style=\"color:#79B8FF\">4</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">.card:not</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">:first-of-type</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  grid-column</span><span style=\"color:#E1E4E8\">: span </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  grid-row</span><span style=\"color:#E1E4E8\">: span </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>And that’s it. Those are the main ideas to keep in mind when you want to create such fancy layouts. Of course there’s a lot more I haven’t mentioned and if you would like to dive deeper, I highly recommend Jen’s course.</p>",{headings:191,imagePaths:202,frontmatter:203},[192,196,199],{depth:193,slug:194,text:195},2,"tldr","TLDR",{depth:193,slug:197,text:198},"intro","Intro",{depth:193,slug:200,text:201},"how-to-use-grid","How to use Grid",[],{title:181,description:182,pubDate:204,image:183,isDraft:84},["Date","2025-01-15T00:00:00.000Z"]];

export { _astro_dataLayerContent as default };
